{
	"$schema": "https://json-schema.org/draft-07/schema#",
	"LdtkJsonRoot": {
		"title": "LDtk Json root",
		"required": [
			"bgColor",
			"defaultGridSize",
			"defaultLevelBgColor",
			"defaultPivotX",
			"defaultPivotY",
			"exportTiled",
			"jsonVersion",
			"levels",
			"minifyJson",
			"nextUid",
			"worldGridHeight",
			"worldGridWidth"
		],
		"properties": {
			"worldGridWidth": {
				"description": "Width of the world grid in pixels.",
				"type": [
					"integer"
				]
			},
			"defaultLevelBgColor": {
				"description": "Default background color of levels",
				"type": [
					"string"
				]
			},
			"bgColor": {
				"description": "Project background color",
				"type": [
					"string"
				]
			},
			"nextUid": {
				"description": "",
				"type": [
					"integer"
				]
			},
			"defaultPivotY": {
				"description": "Default Y pivot (0 to 1) for new entities",
				"type": [
					"number"
				]
			},
			"worldGridHeight": {
				"description": "Height of the world grid in pixels.",
				"type": [
					"integer"
				]
			},
			"defaultGridSize": {
				"description": "Default grid size for new layers",
				"type": [
					"integer"
				]
			},
			"worldLayout": {
				"description": "An enum that describes how levels are organized in this project (ie. linearly or in a 2D space). Possible values: `Free`, `GridVania`, `LinearHorizontal`, `LinearVertical`",
				"enum": [
					"Free",
					"GridVania",
					"LinearHorizontal",
					"LinearVertical"
				]
			},
			"exportTiled": {
				"description": "If TRUE, a Tiled compatible file will also be generated along with the LDtk JSON file (default is FALSE)",
				"type": [
					"boolean"
				]
			},
			"defs": {
				"description": "A structure containing all the definitions of this project",
				"$ref": "#/otherTypes/Definitions"
			},
			"levels": {
				"description": "All levels. The order of this array is only relevant in `LinearHorizontal` and `linearVertical` world layouts (see `worldLayout` value). Otherwise, you should refer to the `worldX`,`worldY` coordinates of each Level.",
				"items": {
					"$ref": "#/otherTypes/Level"
				},
				"type": [
					"array"
				]
			},
			"jsonVersion": {
				"description": "File format version",
				"type": [
					"string"
				]
			},
			"defaultPivotX": {
				"description": "Default X pivot (0 to 1) for new entities",
				"type": [
					"number"
				]
			},
			"minifyJson": {
				"description": "If TRUE, the Json is partially minified (no indentation, nor line breaks, default is FALSE)",
				"type": [
					"boolean"
				]
			}
		},
		"type": [
			"object"
		]
	},
	"$ref": "#/LdtkJsonRoot",
	"otherTypes": {
		"FieldInstance": {
			"title": "Field instance",
			"required": [
				"__identifier",
				"__type",
				"defUid",
				"realEditorValues"
			],
			"additionalProperties": false,
			"properties": {
				"__type": {
					"description": "Type of the field, such as Int, Float, Enum(enum_name), Bool, etc.",
					"type": [
						"string"
					]
				},
				"defUid": {
					"description": "Reference of the **Field definition** UID",
					"type": [
						"integer"
					]
				},
				"__identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"realEditorValues": {
					"description": "",
					"items": {
						"type": [
							"null"
						]
					},
					"type": [
						"array"
					]
				},
				"__value": {
					"description": "Actual value of the field instance. The value type may vary, depending on `__type` (Integer, Boolean, String etc.)<br/>  It can also be an `Array` of various types."
				}
			},
			"type": [
				"object"
			]
		},
		"EntityInstance": {
			"title": "Entity instance",
			"required": [
				"__grid",
				"__identifier",
				"defUid",
				"fieldInstances",
				"px"
			],
			"additionalProperties": false,
			"properties": {
				"defUid": {
					"description": "Reference of the **Entity definition** UID",
					"type": [
						"integer"
					]
				},
				"__identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"__tile": {
					"description": "Optional Tile used to display this entity (it could either be the default Entity tile, or some tile provided by a field value, like an Enum).",
					"type": [
						"object",
						"null"
					]
				},
				"px": {
					"description": "Pixel coordinates (`[x,y]` format). Don't forget optional layer offsets, if they exist!",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"__grid": {
					"description": "Grid-based coordinates (`[x,y]` format)",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"fieldInstances": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/FieldInstance"
					},
					"type": [
						"array"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"Definitions": {
			"title": "Definitions",
			"required": [
				"entities",
				"enums",
				"externalEnums",
				"layers",
				"tilesets"
			],
			"additionalProperties": false,
			"properties": {
				"tilesets": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/TilesetDef"
					},
					"type": [
						"array"
					]
				},
				"layers": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/LayerDef"
					},
					"type": [
						"array"
					]
				},
				"enums": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/EnumDef"
					},
					"type": [
						"array"
					]
				},
				"entities": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/EntityDef"
					},
					"type": [
						"array"
					]
				},
				"externalEnums": {
					"description": "Note: external enums are exactly the same as `enums`, except they have a `relPath` to point to an external source file.",
					"items": {
						"$ref": "#/otherTypes/EnumDef"
					},
					"type": [
						"array"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"AutoRuleDef": {
			"title": "Auto-layer rule definition",
			"required": [
				"active",
				"breakOnMatch",
				"chance",
				"flipX",
				"flipY",
				"pattern",
				"perlinActive",
				"perlinOctaves",
				"perlinScale",
				"perlinSeed",
				"pivotX",
				"pivotY",
				"size",
				"tileIds",
				"uid",
				"xModulo",
				"yModulo"
			],
			"additionalProperties": false,
			"properties": {
				"flipX": {
					"description": "If TRUE, allow rule to be matched by flipping its pattern horizontally",
					"type": [
						"boolean"
					]
				},
				"pivotX": {
					"description": "X pivot of a tile stamp (0-1)",
					"type": [
						"number"
					]
				},
				"perlinActive": {
					"description": "If TRUE, enable Perlin filtering to only apply rule on specific random area",
					"type": [
						"boolean"
					]
				},
				"perlinScale": {
					"description": "",
					"type": [
						"number"
					]
				},
				"pattern": {
					"description": "Rule pattern (size x size)",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"checker": {
					"description": "Checker mode Possible values: `None`, `Horizontal`, `Vertical`",
					"enum": [
						"None",
						"Horizontal",
						"Vertical"
					]
				},
				"perlinOctaves": {
					"description": "",
					"type": [
						"number"
					]
				},
				"tileIds": {
					"description": "Array of all the tile IDs. They are used randomly or as stamps, based on `tileMode` value.",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"xModulo": {
					"description": "X cell coord modulo",
					"type": [
						"integer"
					]
				},
				"size": {
					"description": "Pattern width & height. Should only be 1,3,5 or 7.",
					"type": [
						"integer"
					]
				},
				"chance": {
					"description": "Chances for this rule to be applied (0 to 1)",
					"type": [
						"number"
					]
				},
				"breakOnMatch": {
					"description": "When TRUE, the rule will prevent other rules to be applied in the same cell if it matches (TRUE by default).",
					"type": [
						"boolean"
					]
				},
				"uid": {
					"description": "Unique Int identifier",
					"type": [
						"integer"
					]
				},
				"perlinSeed": {
					"description": "",
					"type": [
						"number"
					]
				},
				"tileMode": {
					"description": "Defines how tileIds array is used Possible values: `Single`, `Stamp`",
					"enum": [
						"Single",
						"Stamp"
					]
				},
				"flipY": {
					"description": "If TRUE, allow rule to be matched by flipping its pattern vertically",
					"type": [
						"boolean"
					]
				},
				"pivotY": {
					"description": "Y pivot of a tile stamp (0-1)",
					"type": [
						"number"
					]
				},
				"yModulo": {
					"description": "Y cell coord modulo",
					"type": [
						"integer"
					]
				},
				"active": {
					"description": "If FALSE, the rule effect isn't applied, and no tiles are generated.",
					"type": [
						"boolean"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"FieldDef": {
			"title": "Field definition",
			"required": [
				"__type",
				"canBeNull",
				"editorAlwaysShow",
				"identifier",
				"isArray",
				"uid"
			],
			"additionalProperties": false,
			"properties": {
				"acceptFileTypes": {
					"description": "Optional list of accepted file extensions for FilePath value type. Includes the dot: `.ext`",
					"items": {
						"type": [
							"string"
						]
					},
					"type": [
						"array",
						"null"
					]
				},
				"editorAlwaysShow": {
					"description": "",
					"type": [
						"boolean"
					]
				},
				"arrayMinLength": {
					"description": "Array min length",
					"type": [
						"integer",
						"null"
					]
				},
				"min": {
					"description": "Min limit for value, if applicable",
					"type": [
						"number",
						"null"
					]
				},
				"__type": {
					"description": "Human readable value type (eg. `Int`, `Float`, `Point`, etc.). If the field is an array, this field will look like `Array<...>` (eg. `Array<Int>`, `Array<Point>` etc.)",
					"type": [
						"string"
					]
				},
				"editorDisplayMode": {
					"description": "Possible values: `Hidden`, `ValueOnly`, `NameAndValue`, `EntityTile`, `PointStar`, `PointPath`, `RadiusPx`, `RadiusGrid`",
					"enum": [
						"Hidden",
						"ValueOnly",
						"NameAndValue",
						"EntityTile",
						"PointStar",
						"PointPath",
						"RadiusPx",
						"RadiusGrid"
					]
				},
				"canBeNull": {
					"description": "TRUE if the value can be null. For arrays, TRUE means it can contain null values (exception: array of Points can't have null values).",
					"type": [
						"boolean"
					]
				},
				"uid": {
					"description": "Unique Intidentifier",
					"type": [
						"integer"
					]
				},
				"isArray": {
					"description": "TRUE if the value is an array of multiple values",
					"type": [
						"boolean"
					]
				},
				"editorDisplayPos": {
					"description": "Possible values: `Above`, `Center`, `Beneath`",
					"enum": [
						"Above",
						"Center",
						"Beneath"
					]
				},
				"max": {
					"description": "Max limit for value, if applicable",
					"type": [
						"number",
						"null"
					]
				},
				"defaultOverride": {
					"description": "Default value if selected value is null or invalid.",
					"type": [
						"null"
					]
				},
				"regex": {
					"description": "Optional regular expression that needs to be matched to accept values. Expected format: `/some_reg_ex/g`, with optional \"i\" flag.",
					"type": [
						"string",
						"null"
					]
				},
				"type": {
					"description": "Internal type enum"
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"arrayMaxLength": {
					"description": "Array max length",
					"type": [
						"integer",
						"null"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"EntityDef": {
			"title": "Entity definition",
			"required": [
				"color",
				"fieldDefs",
				"height",
				"identifier",
				"maxPerLevel",
				"pivotX",
				"pivotY",
				"showName",
				"uid",
				"width"
			],
			"additionalProperties": false,
			"properties": {
				"tileId": {
					"description": "Tile ID used for optional tile display",
					"type": [
						"integer",
						"null"
					]
				},
				"showName": {
					"description": "Display entity name in editor",
					"type": [
						"boolean"
					]
				},
				"tilesetId": {
					"description": "Tileset ID used for optional tile display",
					"type": [
						"integer",
						"null"
					]
				},
				"pivotX": {
					"description": "Pivot X coordinate (from 0 to 1.0)",
					"type": [
						"number"
					]
				},
				"color": {
					"description": "Base entity color",
					"type": [
						"string"
					]
				},
				"fieldDefs": {
					"description": "Array of field definitions",
					"items": {
						"$ref": "#/otherTypes/FieldDef"
					},
					"type": [
						"array"
					]
				},
				"tileRenderMode": {
					"description": "Possible values: `Stretch`, `Crop`",
					"enum": [
						"Stretch",
						"Crop"
					]
				},
				"limitBehavior": {
					"description": "Possible values: `DiscardOldOnes`, `PreventAdding`, `MoveLastOne`",
					"enum": [
						"DiscardOldOnes",
						"PreventAdding",
						"MoveLastOne"
					]
				},
				"uid": {
					"description": "Unique Int identifier",
					"type": [
						"integer"
					]
				},
				"height": {
					"description": "Pixel height",
					"type": [
						"integer"
					]
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"pivotY": {
					"description": "Pivot Y coordinate (from 0 to 1.0)",
					"type": [
						"number"
					]
				},
				"renderMode": {
					"description": "Possible values: `Rectangle`, `Ellipse`, `Tile`, `Cross`",
					"enum": [
						"Rectangle",
						"Ellipse",
						"Tile",
						"Cross"
					]
				},
				"maxPerLevel": {
					"description": "Max instances per level",
					"type": [
						"integer"
					]
				},
				"width": {
					"description": "Pixel width",
					"type": [
						"integer"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"LayerInstance": {
			"title": "Layer instance",
			"required": [
				"__cHei",
				"__cWid",
				"__gridSize",
				"__identifier",
				"__opacity",
				"__pxTotalOffsetX",
				"__pxTotalOffsetY",
				"__type",
				"autoLayerTiles",
				"entityInstances",
				"gridTiles",
				"intGrid",
				"layerDefUid",
				"levelId",
				"pxOffsetX",
				"pxOffsetY",
				"seed"
			],
			"additionalProperties": false,
			"properties": {
				"__cHei": {
					"description": "Grid-based height",
					"type": [
						"integer"
					]
				},
				"pxOffsetX": {
					"description": "X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the `LayerDef` optional offset, see `__pxTotalOffsetX`)",
					"type": [
						"integer"
					]
				},
				"__tilesetRelPath": {
					"description": "The relative path to corresponding Tileset, if any.",
					"type": [
						"string",
						"null"
					]
				},
				"levelId": {
					"description": "Reference to the UID of the level containing this layer instance",
					"type": [
						"integer"
					]
				},
				"__type": {
					"description": "Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)",
					"type": [
						"string"
					]
				},
				"autoLayerTiles": {
					"description": "An array containing all tiles generated by Auto-layer rules. The array is already sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).<br/><br/>  Note: if multiple tiles are stacked in the same cell as the result of different rules, all tiles behind opaque ones will be discarded.",
					"items": {
						"$ref": "#/otherTypes/Tile"
					},
					"type": [
						"array"
					]
				},
				"__identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"__gridSize": {
					"description": "Grid size",
					"type": [
						"integer"
					]
				},
				"__pxTotalOffsetY": {
					"description": "Total layer Y pixel offset, including both instance and definition offsets.",
					"type": [
						"integer"
					]
				},
				"entityInstances": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/EntityInstance"
					},
					"type": [
						"array"
					]
				},
				"__opacity": {
					"description": "Layer opacity as Float [0-1]",
					"type": [
						"number"
					]
				},
				"seed": {
					"description": "Random seed used for Auto-Layers rendering",
					"type": [
						"integer"
					]
				},
				"layerDefUid": {
					"description": "Reference the Layer definition UID",
					"type": [
						"integer"
					]
				},
				"__pxTotalOffsetX": {
					"description": "Total layer X pixel offset, including both instance and definition offsets.",
					"type": [
						"integer"
					]
				},
				"__cWid": {
					"description": "Grid-based width",
					"type": [
						"integer"
					]
				},
				"pxOffsetY": {
					"description": "Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the `LayerDef` optional offset, see `__pxTotalOffsetY`)",
					"type": [
						"integer"
					]
				},
				"__tilesetDefUid": {
					"description": "The definition UID of corresponding Tileset, if any.",
					"type": [
						"integer",
						"null"
					]
				},
				"gridTiles": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/Tile"
					},
					"type": [
						"array"
					]
				},
				"intGrid": {
					"description": "",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"TilesetDef": {
			"title": "Tileset definition",
			"required": [
				"identifier",
				"padding",
				"pxHei",
				"pxWid",
				"relPath",
				"savedSelections",
				"spacing",
				"tileGridSize",
				"uid"
			],
			"additionalProperties": false,
			"properties": {
				"cachedPixelData": {
					"description": "The following data is used internally for various optimizations. It's always synced with source image changes.",
					"type": [
						"object",
						"null"
					]
				},
				"pxHei": {
					"description": "Image height in pixels",
					"type": [
						"integer"
					]
				},
				"uid": {
					"description": "Unique Intidentifier",
					"type": [
						"integer"
					]
				},
				"padding": {
					"description": "Distance in pixels from image borders",
					"type": [
						"integer"
					]
				},
				"pxWid": {
					"description": "Image width in pixels",
					"type": [
						"integer"
					]
				},
				"spacing": {
					"description": "Space in pixels between all tiles",
					"type": [
						"integer"
					]
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"savedSelections": {
					"description": "Array of group of tiles selections, only meant to be used in the editor",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				},
				"relPath": {
					"description": "Path to the source file, relative to the current project JSON file",
					"type": [
						"string"
					]
				},
				"tileGridSize": {
					"description": "",
					"type": [
						"integer"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"Tile": {
			"title": "Tile instance",
			"required": [
				"d",
				"f",
				"px",
				"src",
				"t"
			],
			"additionalProperties": false,
			"properties": {
				"t": {
					"description": "The *Tile ID* in the corresponding tileset.",
					"type": [
						"integer"
					]
				},
				"d": {
					"description": "Internal data used by the editor.<br/>  For auto-layer tiles: `[ruleId, coordId]`.<br/>  For tile-layer tiles: `[coordId]`.",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"px": {
					"description": "Pixel coordinates of the tile in the **layer** (`[x,y]` format). Don't forget optional layer offsets, if they exist!",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				},
				"f": {
					"description": "\"Flip bits\", a 2-bits integer to represent the mirror transformations of the tile.<br/>   - Bit 0 = X flip<br/>   - Bit 1 = Y flip<br/>   Examples: f=0 (no flip), f=1 (X flip only), f=2 (Y flip only), f=3 (both flips)",
					"type": [
						"integer"
					]
				},
				"src": {
					"description": "Pixel coordinates of the tile in the **tileset** (`[x,y]` format)",
					"items": {
						"type": [
							"integer"
						]
					},
					"type": [
						"array"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"LayerDef": {
			"title": "Layer definition",
			"required": [
				"__type",
				"autoRuleGroups",
				"displayOpacity",
				"gridSize",
				"identifier",
				"intGridValues",
				"pxOffsetX",
				"pxOffsetY",
				"tilePivotX",
				"tilePivotY",
				"uid"
			],
			"additionalProperties": false,
			"properties": {
				"pxOffsetX": {
					"description": "X offset of the layer, in pixels (IMPORTANT: this should be added to the `LayerInstance` optional offset)",
					"type": [
						"integer"
					]
				},
				"tilePivotX": {
					"description": "If the tiles are smaller or larger than the layer grid, the pivot value will be used to position the tile relatively its grid cell.",
					"type": [
						"number"
					]
				},
				"displayOpacity": {
					"description": "Opacity of the layer (0 to 1.0)",
					"type": [
						"number"
					]
				},
				"__type": {
					"description": "Type of the layer (*IntGrid, Entities, Tiles or AutoLayer*)",
					"type": [
						"string"
					]
				},
				"tilesetDefUid": {
					"description": "Reference to the Tileset UID being used by this tile layer",
					"type": [
						"integer",
						"null"
					]
				},
				"autoSourceLayerDefUid": {
					"description": "",
					"type": [
						"integer",
						"null"
					]
				},
				"autoTilesetDefUid": {
					"description": "Reference to the Tileset UID being used by this auto-layer rules",
					"type": [
						"integer",
						"null"
					]
				},
				"uid": {
					"description": "Unique Int identifier",
					"type": [
						"integer"
					]
				},
				"intGridValues": {
					"description": "",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				},
				"autoRuleGroups": {
					"description": "Contains all the auto-layer rule definitions.",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				},
				"type": {
					"description": "Type of the layer as Haxe Enum Possible values: `IntGrid`, `Entities`, `Tiles`, `AutoLayer`",
					"enum": [
						"IntGrid",
						"Entities",
						"Tiles",
						"AutoLayer"
					]
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"pxOffsetY": {
					"description": "Y offset of the layer, in pixels (IMPORTANT: this should be added to the `LayerInstance` optional offset)",
					"type": [
						"integer"
					]
				},
				"tilePivotY": {
					"description": "If the tiles are smaller or larger than the layer grid, the pivot value will be used to position the tile relatively its grid cell.",
					"type": [
						"number"
					]
				},
				"gridSize": {
					"description": "Width and height of the grid in pixels",
					"type": [
						"integer"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"Level": {
			"title": "Level",
			"required": [
				"__bgColor",
				"__neighbours",
				"identifier",
				"layerInstances",
				"pxHei",
				"pxWid",
				"uid",
				"worldX",
				"worldY"
			],
			"additionalProperties": false,
			"properties": {
				"__neighbours": {
					"description": "An array listing all other levels touching this one on the world map. The `dir` is a single lowercase character tipping on the level location (`n`orth, `s`outh, `w`est, `e`ast). In \"linear\" world layouts, this array is populated with previous/next levels in array, and `dir` depends on the linear horizontal/vertical layout.",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				},
				"__bgColor": {
					"description": "Background color of the level (same as `bgColor`, except the default value is automatically used here if its value is `null`)",
					"type": [
						"string"
					]
				},
				"worldX": {
					"description": "World X coordinate in pixels",
					"type": [
						"integer"
					]
				},
				"bgColor": {
					"description": "Background color of the level. If `null`, the project `defaultLevelBgColor` should be used.",
					"type": [
						"string",
						"null"
					]
				},
				"pxHei": {
					"description": "Height of the level in pixels",
					"type": [
						"integer"
					]
				},
				"worldY": {
					"description": "World Y coordinate in pixels",
					"type": [
						"integer"
					]
				},
				"uid": {
					"description": "Unique Int identifier",
					"type": [
						"integer"
					]
				},
				"pxWid": {
					"description": "Width of the level in pixels",
					"type": [
						"integer"
					]
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				},
				"layerInstances": {
					"description": "",
					"items": {
						"$ref": "#/otherTypes/LayerInstance"
					},
					"type": [
						"array"
					]
				}
			},
			"type": [
				"object"
			]
		},
		"EnumDef": {
			"title": "Enum definition",
			"required": [
				"identifier",
				"uid",
				"values"
			],
			"additionalProperties": false,
			"properties": {
				"externalFileChecksum": {
					"description": "",
					"type": [
						"string",
						"null"
					]
				},
				"externalRelPath": {
					"description": "Relative path to the external file providing this Enum",
					"type": [
						"string",
						"null"
					]
				},
				"uid": {
					"description": "Unique Int identifier",
					"type": [
						"integer"
					]
				},
				"values": {
					"description": "All possible enum values, with their optional Tile infos.",
					"items": {
						"type": [
							"object"
						]
					},
					"type": [
						"array"
					]
				},
				"iconTilesetUid": {
					"description": "Tileset UID if provided",
					"type": [
						"integer",
						"null"
					]
				},
				"identifier": {
					"description": "Unique String identifier",
					"type": [
						"string"
					]
				}
			},
			"type": [
				"object"
			]
		}
	}
}