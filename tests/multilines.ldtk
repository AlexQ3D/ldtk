{
	"__header__": {
		"fileType": "LDtk Project JSON",
		"app": "LDtk",
		"doc": "https://ldtk.io/json",
		"schema": "https://ldtk.io/files/JSON_SCHEMA.json",
		"appAuthor": "Sebastien 'deepnight' Benard",
		"appVersion": "0.8.0",
		"url": "https://ldtk.io"
	},
	"jsonVersion": "0.8.0",
	"defaultPivotX": 0,
	"defaultPivotY": 0,
	"defaultGridSize": 16,
	"bgColor": "#676877",
	"defaultLevelBgColor": "#7F8093",
	"nextUid": 4,
	"minifyJson": false,
	"externalLevels": false,
	"exportTiled": false,
	"exportPng": false,
	"pngFilePattern": null,
	"backupOnSave": false,
	"backupLimit": 10,
	"worldLayout": "Free",
	"worldGridWidth": 256,
	"worldGridHeight": 256,
	"defs": {
		"layers": [
			{
				"__type": "Entities",
				"identifier": "Entities",
				"type": "Entities",
				"uid": 3,
				"gridSize": 16,
				"displayOpacity": 1,
				"pxOffsetX": 0,
				"pxOffsetY": 0,
				"intGridValues": [{ "identifier": null, "color": "#000000" }],
				"autoTilesetDefUid": null,
				"autoRuleGroups": [],
				"autoSourceLayerDefUid": null,
				"tilesetDefUid": null,
				"tilePivotX": 0,
				"tilePivotY": 0
			}
		],
		"entities": [
			{
				"identifier": "Dummy",
				"uid": 1,
				"width": 48,
				"height": 48,
				"color": "#94D9B3",
				"renderMode": "Ellipse",
				"showName": true,
				"tilesetId": null,
				"tileId": null,
				"tileRenderMode": "Stretch",
				"maxPerLevel": 0,
				"limitBehavior": "DiscardOldOnes",
				"pivotX": 0.5,
				"pivotY": 0.5,
				"fieldDefs": [
					{
						"identifier": "script",
						"__type": "String",
						"uid": 2,
						"type": "F_Text",
						"isArray": false,
						"canBeNull": true,
						"arrayMinLength": null,
						"arrayMaxLength": null,
						"editorDisplayMode": "Hidden",
						"editorDisplayPos": "Above",
						"editorAlwaysShow": false,
						"min": null,
						"max": null,
						"regex": null,
						"acceptFileTypes": null,
						"defaultOverride": null,
						"textLangageMode": "Lua"
					}
				]
			}
		],
		"tilesets": [],
		"enums": [],
		"externalEnums": []
	},
	"levels": [
		{
			"identifier": "Level",
			"uid": 0,
			"worldX": 0,
			"worldY": 0,
			"pxWid": 256,
			"pxHei": 256,
			"__bgColor": "#7F8093",
			"bgColor": null,
			"bgRelPath": null,
			"bgPos": null,
			"bgPivotX": 0.5,
			"bgPivotY": 0.5,
			"__bgPos": null,
			"externalRelPath": null,
			"layerInstances": [
				{
					"__identifier": "Entities",
					"__type": "Entities",
					"__cWid": 16,
					"__cHei": 16,
					"__gridSize": 16,
					"__opacity": 1,
					"__pxTotalOffsetX": 0,
					"__pxTotalOffsetY": 0,
					"__tilesetDefUid": null,
					"__tilesetRelPath": null,
					"levelId": 0,
					"layerDefUid": 3,
					"pxOffsetX": 0,
					"pxOffsetY": 0,
					"intGrid": [],
					"autoLayerTiles": [],
					"seed": 2887611,
					"overrideTilesetUid": null,
					"gridTiles": [],
					"entityInstances": [{ "__identifier": "Dummy", "__grid": [7,8], "__pivot": [0.5,0.5], "__tile": null, "defUid": 1, "px": [120,128], "fieldInstances": [{
						"__identifier": "script",
						"__value": "package form.input;\n\nclass EnumSelect<T:EnumValue> extends form.Input<T> {\n var enumRef : Enum<T>;\n var allowNull : Bool;\n\n public function new(j:js.jquery.JQuery, e:Enum<T>, allowNull=false, getter:Void->T, setter:T->Void, ?nameLocalizer:T->dn.data.GetText.LocaleString, ?filter:T->Bool) {\n  this.allowNull = allowNull;\n\n  super(j, getter, setter);\n\n  enumRef = e;\n\n  jInput.empty();\n  for(k in Type.getEnumConstructs(enumRef)) {\n   var t = enumRef.createByName(k);\n\n   if( filter!=null && !filter(t) )\n    continue;\n\n   var opt = new J(\"<option/>\");\n   jInput.append(opt);\n   opt.attr(\"value\",k);\n   opt.text( nameLocalizer==null ? k : nameLocalizer(t) );\n   if( t==getter() )\n    opt.attr(\"selected\",\"selected\");\n  }\n\n  // \"None\" option\n  if( allowNull ) {\n   var opt = new J(\"<option/>\");\n   jInput.prepend(opt);\n   opt.text( nameLocalizer==null ? Lang.t._(\"(none)\") : nameLocalizer(null) );\n   opt.attr(\"value\", \"\");\n   if( getter()==null )\n    opt.attr(\"selected\",\"selected\");\n  }\n }\n\n override function parseInputValue() : T {\n  if( allowNull && jInput.val()==\"\" )\n   return null;\n  else\n   return enumRef.createByName( jInput.val() );\n }\n}",
						"__type": "String",
						"defUid": 2,
						"realEditorValues": [{
							"id": "V_String",
							"params": [
								"package form.input;\n\nclass EnumSelect<T:EnumValue> extends form.Input<T> {\n var enumRef : Enum<T>;\n var allowNull : Bool;\n\n public function new(j:js.jquery.JQuery, e:Enum<T>, allowNull=false, getter:Void->T, setter:T->Void, ?nameLocalizer:T->dn.data.GetText.LocaleString, ?filter:T->Bool) {\n  this.allowNull = allowNull;\n\n  super(j, getter, setter);\n\n  enumRef = e;\n\n  jInput.empty();\n  for(k in Type.getEnumConstructs(enumRef)) {\n   var t = enumRef.createByName(k);\n\n   if( filter!=null && !filter(t) )\n    continue;\n\n   var opt = new J(\"<option/>\");\n   jInput.append(opt);\n   opt.attr(\"value\",k);\n   opt.text( nameLocalizer==null ? k : nameLocalizer(t) );\n   if( t==getter() )\n    opt.attr(\"selected\",\"selected\");\n  }\n\n  // \"None\" option\n  if( allowNull ) {\n   var opt = new J(\"<option/>\");\n   jInput.prepend(opt);\n   opt.text( nameLocalizer==null ? Lang.t._(\"(none)\") : nameLocalizer(null) );\n   opt.attr(\"value\", \"\");\n   if( getter()==null )\n    opt.attr(\"selected\",\"selected\");\n  }\n }\n\n override function parseInputValue() : T {\n  if( allowNull && jInput.val()==\"\" )\n   return null;\n  else\n   return enumRef.createByName( jInput.val() );\n }\n}"
							]
						}]
					}] }]
				}
			],
			"__neighbours": []
		}
	]
}